# This file was generated by SquareLine Studio
# SquareLine Studio version: SquareLine Studio 1.4.0
# LVGL version: 8.3.11
# Project name: SquareLine_Project

import lvgl as lv
import ui_images
import ui_events

dispp = lv.disp_get_default()
theme = lv.theme_default_init(dispp, lv.palette_main(lv.PALETTE.BLUE), lv.palette_main(lv.PALETTE.RED), True, lv.font_default())
dispp.set_theme(theme)

font_F1R16 = lv.font_load("A:ui_font_F1R16.bin")
font_F1B26 = lv.font_load("A:ui_font_F1B26.bin")
font_F1B22 = lv.font_load("A:ui_font_F1B22.bin")

def ui_theme_set(idx):
   return

def SetFlag( obj, flag, value):
    if (value):
        obj.add_flag(flag)
    else:
        obj.clear_flag(flag)
    return

_ui_comp_table = {}
_ui_comp_prev = None
_ui_name_prev = None
_ui_child_prev = None
_ui_comp_table.clear()

def _ui_comp_del_event(e):
    target = e.get_target()
    _ui_comp_table[id(target)].remove()

def ui_comp_get_child(comp, child_name):
    return _ui_comp_table[id(comp)][child_name]

def ui_comp_get_root_from_child(child, compname):
    for component in _ui_comp_table:
        if _ui_comp_table[component]["_CompName"]==compname:
            for part in _ui_comp_table[component]:
                if id(_ui_comp_table[component][part]) == id(child):
                    return _ui_comp_table[component]
    return None
def SetBarProperty(target, id, val):
   if id == 'Value_with_anim': target.set_value(val, lv.ANIM.ON)
   if id == 'Value': target.set_value(val, lv.ANIM.OFF)
   return

def SetPanelProperty(target, id, val):
   if id == 'Position_X': target.set_x(val)
   if id == 'Position_Y': target.set_y(val)
   if id == 'Width': target.set_width(val)
   if id == 'Height': target.set_height(val)
   return

def SetDropdownProperty(target, id, val):
   if id == 'Selected':
      target.set_selected(val)
   return

def SetImageProperty(target, id, val, val2):
   if id == 'Image': target.set_src(val)
   if id == 'Angle': target.set_angle(val2)
   if id == 'Zoom': target.set_zoom(val2)
   return

def SetLabelProperty(target, id, val):
   if id == 'Text': target.set_text(val)
   return

def SetRollerProperty(target, id, val):
   if id == 'Selected':
      target.set_selected(val, lv.ANIM.OFF)
   if id == 'Selected_with_anim':
      target.set_selected(val, lv.ANIM.ON)
   return

def SetSliderProperty(target, id, val):
   if id == 'Value_with_anim': target.set_value(val, lv.ANIM.ON)
   if id == 'Value': target.set_value(val, lv.ANIM.OFF)
   return

def ChangeScreen( src, fademode, speed, delay):
    lv.scr_load_anim(src, fademode, speed, delay, False)
    return

def DeleteScreen(src):
    return

def IncrementArc( trg, val):
    trg.set_value(trg.get_value()+val)
    lv.event_send(trg,lv.EVENT.VALUE_CHANGED, None)
    return

def IncrementBar( trg, val, anim):
    trg.set_value(trg.get_value()+val,anim)
    return

def IncrementSlider( trg, val, anim):
    trg.set_value(trg.get_value()+val,anim)
    lv.event_send(trg,lv.EVENT.VALUE_CHANGED, None)
    return

def KeyboardSetTarget( keyboard, textarea):
    keyboard.set_textarea(textarea)
    return

def ModifyFlag( obj, flag, value):
    if (value=="TOGGLE"):
        if ( obj.has_flag(flag) ):
            obj.clear_flag(flag)
        else:
            obj.add_flag(flag)
        return

    if (value=="ADD"):
        obj.add_flag(flag)
    else:
        obj.clear_flag(flag)
    return

def ModifyState( obj, state, value):
    if (value=="TOGGLE"):
        if ( obj.has_state(state) ):
            obj.clear_state(state)
        else:
            obj.add_state(state)
        return

    if (value=="ADD"):
        obj.add_state(state)
    else:
        obj.clear_state(state)
    return

def TextAreaMoveCursor( trg, val):
    if val=="UP" : trg.cursor_up()
    if val=="RIGHT" : trg.cursor_right()
    if val=="DOWN" : trg.cursor_down()
    if val=="LEFT" : trg.cursor_left()
    trg.add_state(lv.STATE.FOCUSED)
    return

def set_opacity(obj, v):
    obj.set_style_opa(v, lv.STATE.DEFAULT|lv.PART.MAIN)
    return

def SetTextValueArc( trg, src, prefix, postfix):
    trg.set_text(prefix+str(src.get_value())+postfix)
    return

def SetTextValueSlider( trg, src, prefix, postfix):
    trg.set_text(prefix+str(src.get_value())+postfix)
    return

def SetTextValueChecked( trg, src, txton, txtoff):
    if src.has_state(lv.STATE.CHECKED):
        trg.set_text(txton)
    else:
        trg.set_text(txtoff)
    return

def StepSpinbox( trg, val):
    if val==1 : trg.increment()
    if val==-1 : trg.decrement()
    lv.event_send(trg,lv.EVENT.VALUE_CHANGED, None)
    return

def SwitchTheme(val):
    ui_theme_set(val)
    return

def Flash_Animation(TargetObject, delay):
  PropertyAnimation_0 = lv.anim_t()
  PropertyAnimation_0.init()
  PropertyAnimation_0.set_path_cb(lv.anim_t.path_ease_out)
  PropertyAnimation_0.set_time(1000)
  PropertyAnimation_0.set_var(TargetObject)
  PropertyAnimation_0.set_custom_exec_cb(lambda a, v: TargetObject.set_style_opa(v,0))
  PropertyAnimation_0.set_delay(delay + 0)
  PropertyAnimation_0.set_repeat_count(lv.ANIM_REPEAT.INFINITE)
  PropertyAnimation_0.set_repeat_delay(0) #+ 1000
  PropertyAnimation_0.set_playback_delay(0)
  PropertyAnimation_0.set_playback_time(1000)
  PropertyAnimation_0.set_early_apply(False)
  PropertyAnimation_0.set_values(255, 100)
  lv.anim_t.start(PropertyAnimation_0)

  print ("Flash_Animation called")
  return

# COMPONENTS

# COMPONENTS
ui____initial_actions0 = lv.obj()

ui_MsgScreen = lv.obj()
SetFlag(ui_MsgScreen, lv.obj.FLAG.SCROLLABLE, False)

ui_Msg_Label2 = lv.label(ui_MsgScreen)
ui_Msg_Label2.set_text("SPEED IMPRINT")
ui_Msg_Label2.set_width(lv.SIZE.CONTENT)	# 1
ui_Msg_Label2.set_height(lv.SIZE.CONTENT)   # 1
ui_Msg_Label2.set_x(0)
ui_Msg_Label2.set_y(lv.pct(15))
ui_Msg_Label2.set_align( lv.ALIGN.TOP_MID)
ui_Msg_Label2.set_style_text_font( font_F1R16, lv.PART.MAIN | lv.STATE.DEFAULT )

ui_Msg_Container3 = lv.obj(ui_MsgScreen)
ui_Msg_Container3.remove_style_all()
ui_Msg_Container3.set_height(2)
ui_Msg_Container3.set_width(lv.pct(50))
ui_Msg_Container3.set_x(0)
ui_Msg_Container3.set_y(25)
ui_Msg_Container3.set_align( lv.ALIGN.TOP_MID)
SetFlag(ui_Msg_Container3, lv.obj.FLAG.CLICKABLE, False)
SetFlag(ui_Msg_Container3, lv.obj.FLAG.SCROLLABLE, False)
ui_Msg_Container3.set_style_bg_color(lv.color_hex(0xFF0000), lv.PART.MAIN | lv.STATE.DEFAULT )
ui_Msg_Container3.set_style_bg_opa(255, lv.PART.MAIN| lv.STATE.DEFAULT )

ui_Msg_Container2 = lv.obj(ui_MsgScreen)
ui_Msg_Container2.remove_style_all()
ui_Msg_Container2.set_width(160)
ui_Msg_Container2.set_height(50)
ui_Msg_Container2.set_x(0)
ui_Msg_Container2.set_y(-40)
ui_Msg_Container2.set_align( lv.ALIGN.CENTER)
SetFlag(ui_Msg_Container2, lv.obj.FLAG.CLICKABLE, False)
SetFlag(ui_Msg_Container2, lv.obj.FLAG.SCROLLABLE, False)

ui_Msg_Container5 = lv.obj(ui_MsgScreen)
ui_Msg_Container5.remove_style_all()
ui_Msg_Container5.set_width(200)
ui_Msg_Container5.set_height(lv.SIZE.CONTENT)   # 1
ui_Msg_Container5.set_x(0)
ui_Msg_Container5.set_y(10)
ui_Msg_Container5.set_align( lv.ALIGN.CENTER)
SetFlag(ui_Msg_Container5, lv.obj.FLAG.CLICKABLE, False)
SetFlag(ui_Msg_Container5, lv.obj.FLAG.SCROLLABLE, False)

ui_Msg_Container4 = lv.obj(ui_Msg_Container5)
ui_Msg_Container4.remove_style_all()
ui_Msg_Container4.set_width(5)
ui_Msg_Container4.set_height(26)
ui_Msg_Container4.set_x(15)
ui_Msg_Container4.set_y(0)
ui_Msg_Container4.set_align( lv.ALIGN.LEFT_MID)
SetFlag(ui_Msg_Container4, lv.obj.FLAG.CLICKABLE, False)
SetFlag(ui_Msg_Container4, lv.obj.FLAG.SCROLLABLE, False)
ui_Msg_Container4.set_style_bg_color(lv.color_hex(0x00D1BA), lv.PART.MAIN | lv.STATE.DEFAULT )
ui_Msg_Container4.set_style_bg_opa(255, lv.PART.MAIN| lv.STATE.DEFAULT )

ui_Msg_Label3 = lv.label(ui_Msg_Container5)
ui_Msg_Label3.set_text("Loading")
ui_Msg_Label3.set_width(lv.SIZE.CONTENT)	# 1
ui_Msg_Label3.set_height(lv.SIZE.CONTENT)   # 1
ui_Msg_Label3.set_x(25)
ui_Msg_Label3.set_y(0)
ui_Msg_Label3.set_align( lv.ALIGN.LEFT_MID)
ui_Msg_Label3.set_style_text_font( font_F1B26, lv.PART.MAIN | lv.STATE.DEFAULT )

ui_MsgScreen_Image3 = lv.img(ui_MsgScreen)
ui_MsgScreen_Image3.set_src(ui_images.ui_img_loading_person_png)
ui_MsgScreen_Image3.set_width(lv.SIZE.CONTENT)	# 1
ui_MsgScreen_Image3.set_height(lv.SIZE.CONTENT)   # 1
ui_MsgScreen_Image3.set_x(58)
ui_MsgScreen_Image3.set_y(53)
ui_MsgScreen_Image3.set_align( lv.ALIGN.CENTER)
SetFlag(ui_MsgScreen_Image3, lv.obj.FLAG.ADV_HITTEST, True)
SetFlag(ui_MsgScreen_Image3, lv.obj.FLAG.SCROLLABLE, False)

ui_MsgScreen_Label4 = lv.label(ui_MsgScreen)
ui_MsgScreen_Label4.set_text("\"\"")
ui_MsgScreen_Label4.set_width(lv.SIZE.CONTENT)	# 1
ui_MsgScreen_Label4.set_height(lv.SIZE.CONTENT)   # 1
ui_MsgScreen_Label4.set_x(-50)
ui_MsgScreen_Label4.set_y(65)
ui_MsgScreen_Label4.set_align( lv.ALIGN.CENTER)
ui_MsgScreen_Label4.set_style_text_font( font_F1R16, lv.PART.MAIN | lv.STATE.DEFAULT )

def EmoilScreen_Container2_eventhandler(event_struct):
   event = event_struct.code
   if event == lv.EVENT.RELEASED and True:
      play_emoil( event_struct )
   return

ui_EmoilScreen = lv.obj()
SetFlag(ui_EmoilScreen, lv.obj.FLAG.SCROLLABLE, False)
ui_EmoilScreen.set_style_bg_color(lv.color_hex(0x0084CD), lv.PART.MAIN | lv.STATE.DEFAULT )
ui_EmoilScreen.set_style_bg_opa(255, lv.PART.MAIN| lv.STATE.DEFAULT )
ui_EmoilScreen.set_style_bg_img_src( ui_images.ui_img_helmet_redbull_png, lv.PART.MAIN | lv.STATE.DEFAULT )

ui_EmoilScreen_Container2 = lv.obj(ui_EmoilScreen)
ui_EmoilScreen_Container2.remove_style_all()
ui_EmoilScreen_Container2.set_width(lv.pct(100))
ui_EmoilScreen_Container2.set_height(lv.pct(100))
ui_EmoilScreen_Container2.set_align( lv.ALIGN.CENTER)
SetFlag(ui_EmoilScreen_Container2, lv.obj.FLAG.CLICKABLE, False)
SetFlag(ui_EmoilScreen_Container2, lv.obj.FLAG.SCROLLABLE, False)

ui_EmoilScreen_Container1 = lv.obj(ui_EmoilScreen_Container2)
ui_EmoilScreen_Container1.remove_style_all()
ui_EmoilScreen_Container1.set_width(150)
ui_EmoilScreen_Container1.set_height(80)
ui_EmoilScreen_Container1.set_x(0)
ui_EmoilScreen_Container1.set_y(20)
ui_EmoilScreen_Container1.set_align( lv.ALIGN.CENTER)
SetFlag(ui_EmoilScreen_Container1, lv.obj.FLAG.CLICKABLE, False)
SetFlag(ui_EmoilScreen_Container1, lv.obj.FLAG.SCROLLABLE, False)

ui_EmoilScreen_Container2.add_event_cb(EmoilScreen_Container2_eventhandler, lv.EVENT.ALL, None)

def Flash_eventhandler(event_struct):
   event = event_struct.code
   if event == lv.EVENT.SCREEN_LOADED and True:
      Flash_Animation(ui_Flash_Label5, 100)
   return

ui_Flash = lv.obj()
SetFlag(ui_Flash, lv.obj.FLAG.SCROLLABLE, False)

ui_Flash_Label5 = lv.label(ui_Flash)
ui_Flash_Label5.set_text("SPEED IMPRINT")
ui_Flash_Label5.set_width(lv.SIZE.CONTENT)	# 1
ui_Flash_Label5.set_height(lv.SIZE.CONTENT)   # 1
ui_Flash_Label5.set_align( lv.ALIGN.CENTER)
ui_Flash_Label5.set_style_text_font( font_F1B22, lv.PART.MAIN | lv.STATE.DEFAULT )

ui_Flash.add_event_cb(Flash_eventhandler, lv.EVENT.ALL, None)

lv.scr_load(ui_MsgScreen)
